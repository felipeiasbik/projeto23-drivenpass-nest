generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id Int @id @default(autoincrement())
  email String @unique
  password String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  credentials Credential[]
  notes Note[]
  cards Card[]
  @@map("users")
}

model Credential {
  id Int @id @default(autoincrement())
  userId Int
  title String
  url String
  credentialsUser String
  credentialsPass String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user User @relation(fields: [userId], references: [id])
  @@map("credentials")
  @@unique([userId, title], name: "unique_title_per_user_credentials")
}

model Note {
  id Int @id @default(autoincrement())
  userId Int
  title String
  text String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user User @relation(fields: [userId], references: [id])
  @@map("notes")
  @@unique([userId, title], name: "unique_title_per_user_notes")
}

model Card {
  id Int @id @default(autoincrement())
  userId Int
  title String
  cardNumber String
  cardName String
  cardCvv String
  cardExpiration String
  cardPass String
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  user User @relation(fields: [userId], references: [id])
  cardType CardType @relation(fields: [cardTypeId], references: [id])
  cardTypeId Int
  virtualCard Boolean @default(false)
  @@map("cards")
  @@unique([userId, title], name: "unique_title_per_user_cards")
}

model CardType {
  id Int @id @default(autoincrement())
  type String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  cards Card[]
  @@map("cardtypes")
}